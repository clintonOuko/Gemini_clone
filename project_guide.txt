create the app
add some basic styling that applies to all the pages in the App.css file
in the assets folder, add all the asset images and create a new file assets.js
import all the assets added and then crete a const variable known as assets that exports it 

import history_icon from './history_icon.png'
import menu_icon from './menu_icon.png'

export const assets = {
    history_icon,
    menu_icon,
}
create a components folder in the src folder and add a sidebar folder inside, and a main folder 
in the sidebar folder create a file sidebar.jsx, and a sidebar.css
create a functional component and import the sidebar.css because theyre in the same folder
in the App.js file, instead of returning the className = 'App', return an empty fragment and pass the Sidebar inside it 
We will create all the frontend in the sidebar.js file 
create two divs in the sidebar div
to add an image from the assets, 
    import {assets} from '../../assets/assets
    <img  className='menu' src={assets.menu_icon} alt=" />
after adding all the html to the frontend, style using the classes in the sidebar.css 

// TAdding functionalities to the sidebar page
when the menu icon is clicked it expands and reduces the sidebar size
sidebar.jsx>>
    using state variables
    const [extended, setExtended] = useState(false); // when true then the sidebar will be fully displayed but when false it wont be displayed 

const [extended, setExtended]:

This is array destructuring that pulls two elements out of the array returned by useState().
extended: This is the state variable. It holds the current value of the state, which in this case starts as false.
setExtended: This is the function used to update the state. You call this function when you want to change the value of extended.

Now use the above functionality and the ternary operator to check on the sidebar variables and set them as needed
    {extended?<p>New Chat</p>:null} // if true then it will be displayed and if false it wont be displayed 

do this for the recent entry also and the bottom section
                    {extended?<p>Help</p>:null}
after completion the sidebar now reduces its size as it was expected
// Adding the functionality to the button click to set the state variable as false or true 
the function setExtended is defined as an arrow function and passed as an onClick which when clicked toggles the state 
    <img  onClick={()=>{setExtended(prev=>!prev)}} className='menu' src={assets.menu_icon} alt="" />

// Adding fonts to the website 
in google search for outfit font > forms.google.com >> get font >> get embedded code >> import >> copyfirst import link given 
    @import url('https://fonts.googleapis.com/css2?family=Outfit:wght@100..900&display=swap');
in the App.css file add the above link and set the font-family to outfit 



MAIN COMPONENT 

Add all the frontend and style it


// now its time to integrate with the gemini api 
on a new tab, search gemini API, create a new API, then generate an API Key, shown below


in the src, create a new folder config, then create a new file gemini.js
gemini.js >> const apiKey = ""; // The api key is passed inside it 
copy the code from the google AI studio and paste it inside the gemini.js 
create a .env file and install dotenv(npm install dotenv)
require('dotenv').config(); // Load environment variables
now you can access the api key 
  const apiKey = process.env.GEMINI_API_KEY;

In the async function run() copied from the gemini website, some changes area passed to enable it work properly as needed.
    async function run(prompt)
    const result = await chatSession.sendMessage(prompt);

Export the run function as a default to be able to use it in the frontend function
eport default run;

create a context folder and a context.js file.
create a context and define the contextProvider passing in the props as a value to the arrow function 

in the index.js file, remove the React.StrictMode and pass the contextProvider 
  <ContextProvider>
    <App />
  </ContextProvider>
now the api is supported 

in the context.js file, create a new function onSent() which takes in a prompt and passes it into the run() function from the gemini.js file 
    const onSent = async (prompt) =>{
        await run(prompt);
    }

    onSent("Define consistency")

ORDER OF EXECUTION OF FILES AT THIS STAGE 
load the page,
index.js >>> execute the <ContextProvider /> component. when rendered, it goes to the context.js >>>> file in the ContextProvider function, the context.provider supplies the context that should be passed.
inside ContextProvider, the createContext-generated context (from context.Provider) supplies contextValue to its children. props.children (in this case, the <App /> component) is rendered inside ContextProvider, so all components inside <App /> have access to this context.
Any child component can consume contextValue if it imports context and uses the useContext hook. 



// change the following in the gemini.js file to allow it work as expected
import {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } from "@google/generative-ai";
  this is because the requrie cant be imported directly from a frontend app.


LINKING THE PROMPT FROM USER TO THE GEMINI API 
create a new state variable inside the contextProvider function 

    const [input, setInput] = useState(""); // to get the user inputs 
    const [recentPrompt, setRecentPrompt] = useState(""); // to get the recent prompt 
    const [prevPrompts, setPrevPrompts] = useState([]);// recent prompts to be set in the sidebar under recent section 
    const [showResult, setShowResult] = useState(false);// to show the results of the prompts entered by the user 
    const [loading, setLoading] = useState(false); // to set the loading status of the data 
    const [resultData, setResultData] = useState(""); // to display the data once it has been gully loaded 

add the following in to the context value which is passed as a value in the context file 
    const contextValue = {
        onSent,
        recentPrompt,
        setRecentPrompt,
        prevPrompts,
        setPrevPrompts,
        loading,
        resultData,
        input,
        setInput,
        showResult
    }

in the main.js file, retrieve all the passed values 
  const {onSent, recentPrompt, showResult, loading, resultData, setInput, input} = useContext(context)

in the input field,
    <input  onChange={(e)=>setInput(e.target.value)} value={input} type='text' placeholder='Ask Gemini'  />
the context.js file, add the input as a parameter to the onSet function 
in the send button, set the onClick to the onSent 
       <img onClick={()=>onSent()} src={assets.send_icon} />
when clicked, it will show the value on the console.

    const onSent = async (prompt) =>{
        setResultData(""); // to remove previous answer from state variable
        setLoading(true); // a loading animation
        setShowResult(true); // show the results to the screen 
        await run(input);
    }
In the gemini.js, return the response 

    const onSent = async (prompt) =>{
        setResultData(""); // to remove previous answer from state variable
        setLoading(true); // a loading animation
        setShowResult(true); // show the results to the screen 
        const response = await run(input); // get response from the gemini API 
        setResultData(response); // to set the results for display 
        setLoading(false); // to stop the loading process 
        setInput(""); // to set the Input file to blank 
    }
In the main container, add the data 
when returning the results, the following is how to do it  

// Adding the previous prompts to be stored 
in the onSent() function,  add the following 
        setPrevPrompts(prev=>[...prev, input])
this will save the previous prompt for easy access in the sidebar 
sidebar.js>>
get the variables from the context file created 
    const {onSent, prevPrompts, setRecentPrompt} = useContext(context);
under the recent section, 
                    <div className="recent">
                        <p className="recent-title">Recent</p>
                        {prevPrompts.map((item, index) => {
                            return (
                                <div className="recent-entry">
                                    <img src={assets.message_icon} alt="" />
                                    <p>{item} ...</p>
                                </div>
                            )
                        })}

                    </div>

To deal with the long questions added, the following can be a perfect way to handle it 
      <p>{item.slice(0,18)} ...</p>


 










